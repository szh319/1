<template>
  <div class="container">
    <!-- 阅读区 -->
    <div class="content" 
         @touchstart="recordStart" 
         @touchend="handleSwipe">
      <text class="text">
        {{ currentContent }}
      </text>
    </div>
    <!-- 页码（强制兜底） -->
    <text class="page-info">
      {{ currentPage || 1 }} / {{ totalPages || 1 }}
    </text>
  </div>
</template>

<style>
.container {
  width: 100%;
  height: 100%;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: #ffffff;
}
.content {
  width: 90%;
  height: 70%;
  justify-content: center;
  align-items: center;
  padding: 8px;
}
.text {
  font-size: 14px; /* 手环适配 */
  line-height: 20px;
  text-align: center;
}
.page-info {
  font-size: 12px;
  color: #666;
  margin-top: 6px;
}
</style>

<script>
export default {
  data() {
    return {
      contentList: ["测试内容1", "测试内容2", "测试内容3"], // 硬编码文本（必现）
      currentPage: 1,         // 强制初始值
      totalPages: 3,          // 与contentList长度一致
      currentContent: "测试内容1", // 兜底内容
      startY: 0,
      swipeThreshold: 20      // 灵敏滑动
    };
  },

  onInit() {
    this.updateContent(); // 确保内容渲染
  },

  methods: {
    recordStart(e) {
      if (e?.touches?.[0]) {
        this.startY = e.touches[0].clientY;
      }
    },

    handleSwipe(e) {
      if (!e?.changedTouches?.[0]) return;
      const endY = e.changedTouches[0].clientY;
      const diff = endY - this.startY;

      // 上滑 → 下一页
      if (diff < -this.swipeThreshold && this.currentPage < this.totalPages) {
        this.currentPage++;
        this.updateContent();
      }
      // 下滑 → 上一页
      else if (diff > this.swipeThreshold && this.currentPage > 1) {
        this.currentPage--;
        this.updateContent();
      }
    },

    updateContent() {
      // 强制防越界
      const index = Math.min(Math.max(this.currentPage - 1, 0), this.contentList.length - 1);
      this.currentContent = this.contentList[index] || "无内容";
    }
  }
};
</script>